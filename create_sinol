#!/bin/bash

declare -A solutions

function prepare_directories {
	T=$(mktemp -d)

	Z=$(dirname "$(realpath "$0")")
	ln -s "$Z" "$T/tcs"
}

function include_config {
	if [ ! -f config ]; then
		echo "The config file is missing. Go and create one!"
		exit 1
	fi
	source config
	R=$PROBLEM_SHORT
}

function check_config {
	if [ -z "${PROBLEM_SHORT+x}" ]; then
		echo "The problem is improperly configured. The PROBLEM_SHORT is missing"
		exit 1
	fi
	echo "Problem name: $PROBLEM_SHORT"
}

function make_dirs {
	mkdir -p "$R"
	mkdir -p "$R/doc"
	mkdir -p "$R/in"
	mkdir -p "$R/out"
	mkdir -p "$R/prog"
}

function make_code {
	local FROM TO TEMPLATE FILE FUNC
	FROM=$1
	TO=$2
	TEMPLATE=$3

	if ! [[ $FROM =~ (.*)@(.*) ]]; then
		echo "Wrong file@function descriptor: $FROM"
		exit 1
	fi

	FILE=${BASH_REMATCH[1]}
	FUNC=${BASH_REMATCH[2]}

	m4 -G -DFUNC="$FUNC" -DFILE="$FILE" -DSHORT="$R" - > _temporary.cpp <<HERE
changecom(\`@@')include(tcs/tpl/$TEMPLATE)
HERE
	tcs/mk_code.sh _temporary.cpp
	mv _temporary.o.cpp "$R/prog/$R$TO.cpp"
	rm _temporary.cpp
}

function make_solutions {
	for i in "${!solutions[@]}"; do
		j=$i
		if [[ $j == "_" ]]; then
			j=
		fi
		make_code "${solutions[$i]}" "$j" solution
	done
}

function create_makefile_in {
	cat > "$R/makefile.in" <<HERE
MODE=wer
ID=$R
SIG=tcs-$R

TIMELIMIT=3
SLOW_TIMELIMIT=3
MEMLIMIT=66000

OI_TIME=DUMMY
CXXFLAGS=-std=c++14
HERE
}

function drop_makefiles {
	echo "-include ~/.sinol/makefile.main" > "$R/makefile"
	echo "-include ~/.sinol/makefile.doc" > "$R/doc/makefile"
	echo "-include ~/.sinol/makefile.prog" > "$R/prog/makefile"
}

function copy_statement {
	cp statement/statement.tex "$R/doc/${R}zad.tex"
	cp statement/in/* "$R/in"
	cp statement/out/* "$R/out"
}

echo "This script will create a sinol package from problem in current workdir"

prepare_directories
include_config
check_config
make_dirs

make_code "$CHECKER" chk checker
make_code "$TESTCASE" inwer validator
make_code "$TESTS" ingen generator
make_solutions

create_makefile_in
drop_makefiles

copy_statement
